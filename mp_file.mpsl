/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    File manipulation.

    Copyright (C) 1991-2009 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://www.triptico.com

*/

/** editor actions **/

mp.actions['new']	= sub (d) {
	d = mp.find_file_by_name(L("<unnamed>"));

	if (d != -1) {
		mp.active_i = d;
		d = mp.active();
	}
	else
		d = mp.new();
};

mp.actions['next']	= sub (d) { mp.next(); };
mp.actions['prev']	= sub (d) { mp.prev(); };

mp.actions['save_as']	= sub (d) {

	local t;

	if ((t = mp.savefile(L("Save file as:"))) == NULL)
		return;

	/* store new name */
	d.name = t;

	if (mp.long_op(mp.save, d) == -1)
		mp.alert(sprintf(L("Error saving file: %s"), ERRNO));
	else
		mp.detect_syntax(d);
};

mp.actions['save']	= sub (d) {

	/* name is <unnamed> or something similar; ask for one */
	if (regex("/^<.+>$/", d.name))
		mp.actions.save_as(d);
	else
	if (mp.long_op(mp.save, d) == -1)
		mp.alert(sprintf(L("Error saving file: %s"), ERRNO));
};

mp.actions['close']	= sub (d) {

	if (d.txt.mod) {
		local r;
		r = mp.confirm(L("File has changed. Save changes?"));

		/* cancel? don't close */
		if (r == 0)
			return;
		if (r == 1)
			mp.actions.save(d);
	}

	mp.close();
};

mp.actions['exit']	= sub (d) {

	local s;

	if (mp.config.auto_sessions)
		mp.save_session();

	if (mp.actions.close_all())
		mp.exit();
};

mp.actions['open']	= sub (d) {

	local n;

	if ((n = mp.openfile(L("File to open:"))) != NULL && n ne "")
		if (mp.long_op(mp.open, n) == NULL && ERRNO != NULL)
			mp.alert(sprintf("Error opening '%s': %s", n, ERRNO));
};

mp.actions['revert']	= sub (d) {
	/* save current name */
	local p = d.name;

	if (d.txt.mod) {
		local r;
		r = mp.confirm(L("File has changed. Are you sure?"));

		/* cancel? don't close */
		if (r == 0 || r == 2)
			return;
	}

	mp.close();
	if (mp.long_op(mp.open, p) == NULL && ERRNO != NULL)
		mp.alert(sprintf("Error opening '%s': %s", p, ERRNO));
};

mp.actions['open_config_file']	= sub (d) {

	mp.open(HOMEDIR ~ ".mp.mpsl");
};

mp.actions['sync'] = sub (d) {

	/* save all modified documents */
	foreach (d, grep(sub (e) { e.txt.mod; }, mp.docs))
		mp.actions.save(d);
};

mp.actions['exec_command']	= sub (d) {

	local t = mp.form( [
		{ 'label' => L("System command:"),
		  'type' => 'text',
		  'history' => 'system' }
		]);

	if (t != NULL) {
		local cmd = t[0];

		/* does it start with a pipe? */
		if (regex('/^\|/', cmd)) {
			local p;

			/* yes; current document should be fed to it */
			cmd = sregex('/^\|/', cmd, NULL);

			if ((p = popen(cmd, "w")) != NULL) {
				foreach (l, mp.get_active_area(d))
					write(p, l ~ mp.config.eol);

				pclose(p);
			}
			else
				mp.drv.alert(
					sprintf(L("Error writing to command '%s'"), cmd));
		}
		else {
			/* no; execute command and insert into cursor */
			local p;

			if ((p = popen(cmd, "r")) != NULL) {
				local l;

				mp.store_undo(d);

				while ((l = read(p)) != NULL) {
					mp.insert(d, mp.chomp(l));
					mp.insert_newline(d);
				}

				pclose(p);
			}
			else
				mp.drv.alert(
					sprintf(L("Error reading from command '%s'"), cmd));
		}
	}
};

mp.actions['close_all'] = sub {

	local s;

	while (s = size(mp.docs)) {
		local doc = mp.docs[mp.active_i];
		
		/* close current document */
		mp.actions.close(doc);

		/* if the size of the list hasn't changed,
		   action was cancelled, so don't exit */
		if (s == size(mp.docs))
			return 0;
	}

	return 1;
};

mp.actions['open_under_cursor'] = sub (d) {
	local w;

	/* is the word under cursor file:line: ? */
	if ((w = mp.get_word(d, '/[a-z\._0-9\/ :-]+:[0-9]+: ?/i')) != NULL) {
		w = split(':', w);

		/* drop garbage */
		pop(w);

		/* pick the line */
		local l = pop(w) - 1;

		/* open the file, rejoining with : */
		local n = mp.open(join(':', w));

		/* now move to the line */
		mp.search_set_y(n, l);
	}
	else
	if ((w = mp.get_word(d, '/[a-z\._0-9\/:-]+/i')) != NULL) {
		mp.open(w);
	}
};

mp.actions['hex_view']	= sub (d) {

	local n;

	if ((n = mp.openfile(L("File to open:"))) != NULL && n ne "")
		if (mp.long_op(mp.hex_view, n) == NULL && ERRNO != NULL)
			mp.alert(sprintf("Error opening '%s': %s", n, ERRNO));
};

mp.actions['open_dropped_files'] = sub (d) {
	while (size(mp.dropped_files))
		mp.open(shift(mp.dropped_files));
};


/** default key bindings **/

mp.keycodes['ctrl-n']		= 'next';
mp.keycodes['ctrl-o']		= 'open';
mp.keycodes['ctrl-q']		= 'exit';
mp.keycodes['ctrl-s']		= 'save';
mp.keycodes['ctrl-w']		= 'close';
mp.keycodes['ctrl-enter']	= 'open_under_cursor';
mp.keycodes['dropped-files']	= 'open_dropped_files';

mp.keycodes['close-window'] 	= 'exit';

/** action descriptions **/

mp.actdesc['new']	= LL("New");
mp.actdesc['save']	= LL("Save...");
mp.actdesc['save_as']	= LL("Save as...");
mp.actdesc['next'] 	= LL("Next");
mp.actdesc['prev'] 	= LL("Previous");
mp.actdesc['open'] 	= LL("Open...");
mp.actdesc['exit'] 	= LL("Exit");
mp.actdesc['close'] 	= LL("Close");
mp.actdesc['revert']	= LL("Revert");
mp.actdesc['close_all']	= LL("Close all");

mp.actdesc['open_config_file']		= LL("Edit configuration file");
mp.actdesc['sync']			= LL("Save modified texts");
mp.actdesc['exec_command']		= LL("Run system command...");
mp.actdesc['open_under_cursor']		= LL("Open file under cursor");
mp.actdesc['hex_view']			= LL("Hexadecimal viewer...");
mp.actdesc['open_dropped_files']	= LL("Open dropped files");

/** code **/

sub mp.chomp(str)
/* chomps the end of file chars from a string */
{
	sregex("/\r*\n*$/", str, NULL);
}


sub mp.save(doc)
/* saves a file */
{
	local f;
	local s = NULL;
	local nl = 0;

	/* if unlink before write is desired, do it */
	if (mp.config.unlink && (s = stat(doc.name)) != NULL)
		unlink(doc.name);

	/* set the encoding for this file opening */
	TEMP_ENCODING = doc.encoding;

	if ((f = open(doc.name, "wb")) == NULL) {
		/* can't write? delete name */
		doc.name = L("<unnamed>");
		return -1;
	}

	/* if the document has a password, save it encrypted */
	if (doc.password)
		nl = mp.crypt1_save(f, doc.txt.lines, doc.password);
	else {
		/* save as a plain text file */
		foreach (l, doc.txt.lines) {
			/* write a line separator if it's not the first line */
			if (nl)
				write(f, doc.eol || mp.config.eol);

			write(f, l);
			nl++;
		}
	}

	close(f);

	doc.txt.mod = 0;

	/* set back the permissions and ownership, if available */
	if (s != NULL) {
		chmod(doc.name, s[2]);
		chown(doc.name, s[4], s[5]);
	}

	return nl;
}


sub mp.new(filename, lines)
/* creates a new document */
{
	local doc, txt;

	txt = {};
	txt.x = 0;
	txt.y = 0;
	txt.vx = 0;
	txt.vy = 0;
	txt.lines = lines || [ '' ];
	txt.mod = 0;

	doc = {};
	doc.name = filename || L("<unnamed>");
	doc.txt = txt;

	doc.undo = [];
	doc.redo = [];

	doc.syntax = NULL;

	/* store in the list and set as active */
	push(mp.docs, doc);
	mp.active_i = size(mp.docs) - 1;

	/* autodetect syntax */
	mp.detect_syntax(doc);

	return doc;
}


sub mp.next()
/* rotates through the document list */
{
	if (++mp.active_i == size(mp.docs))
		mp.active_i = 0;

	return mp.active();
}


sub mp.prev()
/* rotates through the document list, backwards */
{
	if (--mp.active_i == -1)
		mp.active_i = size(mp.docs) - 1;

	return mp.active();
}


sub mp.close()
/* closes the active document */
{
	local k = mp.active_i;

	/* delete from the list */
	adel(mp.docs, mp.active_i);

	/* rotate if it was the last one */
	if (mp.active_i == size(mp.docs))
		mp.active_i = 0;

	/* cannot call mp.active() */
}


sub mp.find_file_by_name(filename)
/* finds an open file by its name */
{
	seek(map(sub(d) { d.name; }, mp.docs), filename);
}


sub mp.open(filename)
/* opens a new document (uses UI) */
{
	local s;

	/* looks first if the file is already open */
	if ((s = mp.find_file_by_name(filename)) != -1) {
		mp.active_i = s;
		return mp.active();
	}

	if ((s = stat(filename)) == NULL) {
		mp.message = {
			'timeout' => time() + 2,
			'string'  => sprintf(L("New file '%s'"), filename)
		};

		return mp.new(filename);
	}

	/* canonicalize, if possible */
	if (s[13] != NULL) {
		filename = s[13];

		/* look again for this filename in the open files */
		if ((s = mp.find_file_by_name(filename)) != -1) {
			mp.active_i = s;
			return mp.active();
		}
	}

	local d, f;

	if ((f = open(filename, "rb")) == NULL)
		return NULL;
	else {
		if (mp.crypt1_detect(f)) {
			/* password needed; ask for it */
			local p;

			if ((p = mp.form( [
				{ 'label'	=> L("Password:"),
				  'type'	=> 'password' }
				])) == NULL) {
				/* cancel? fail, but not on error */
				return NULL;
			}

			/* get the password */
			p = p[0];

			/* an empty password is equal to cancellation */
			if (p eq '')
				return NULL;

			/* and load the file */
			d = mp.new(filename, mp.crypt1_load(f, p));
			d.password = p;
		}
		else {
			/* close file (needed for rewinding AND
			   possible encoding autodetection) */
			close(f);

			/* reopen and read */
			f = open(filename, "rb");
			d = mp.new(filename, mp.plain_load(f));
		}

		close(f);
	}

	/* store the encoding */
	d.encoding = DETECTED_ENCODING || ENCODING || '';

	/* if original EOL is to be kept, store it */
	if (mp.config.keep_eol)
		d.eol = mp.last_seen_eol;

	return d;
}


sub mp.hex_view(filename)
/* shows a file as an hex dump */
{
	local f, c;

	if ((f = open(filename, "rb")) == NULL)
		return NULL;

	local lines = 	[];
	local l = 	[];
	local offset = 	0;

	while (1) {
		if ((c = getchar(f)) != NULL)
			push(l, c);

		if (size(l) == 16 || c == NULL) {
			local h = '';
			local a = ' ';

			/* add hex view */
			foreach (v, l) {
				h = h ~ sprintf(' %02X', ord(v));

				if (ord(v) == 0x0a)
					v = "\x{00b6}";
				else
				if (ord(v) < 32 || ord(v) > 126)
					v = "\x{00b7}";

				a = a ~ v;
			}

			local n = 16 - size(l);

			/* fill up to 16 */
			while (n--) {
				h = h ~ '   ';
				a = a ~ ' ';
			}

			push(lines, join(' |', [ sprintf('| %06X', offset), h, a, '']));
			offset += 16;
			l = [];

			if (c == NULL)
				break;
		}
	}

	close(f);

	local d = mp.new('<' ~ filename ~ ' hex view>', lines);
	d.read_only = 1;
	d.syntax = mp.syntax.hex_view;

	return d;
}
