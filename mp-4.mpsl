/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Copyright (C) 2005 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://www.triptico.com

*/

/*******************
	Data
********************/

/* main data */
mp = {};

/* configuration */
mp.config = {};
mp.config.eol = "\n";
mp.config.undo_levels = 20;

/*******************
	Code
********************/

sub mp.set_x(doc, x)
/* sets the x position */
{
	local txt = doc.txt;

	if(x < 0)
	{
		/* cursor moved left of the bol; effective cursor up + eol */
		if(txt.y > 0)
		{
			/* one line up */
			txt.y--;

			/* set x to the end of the line */
			txt.x=size(txt.lines[txt.y]);
		}
	}
	else
	{
		/* test if moved beyond end of line */
		if(x > size(txt.lines[txt.y]))
		{
			if(txt.y < size(txt.lines) - 1)
			{
				/* cursor moved right of eol;
				   effective cursor down + bol */
				txt.x=0;
				txt.y++;
			}
		}
		else
			txt.x=x;
	}
}


sub mp.set_y(doc, y)
/* sets the y position */
{
	local txt = doc.txt;

	/* set boundaries */
	if(y < 0) y = 0;
	if(y > size(txt.lines)) y = size(txt.lines);

	/* move there */
	txt.y=y;

	/* if x is beyond last char, move to end of line */
	if(txt.x > size(txt.lines[txt.y]))
		txt.x=size(txt.lines[txt.y]);
}


sub mp.move_up(doc)
/* moves one line up */
{
	mp.set_y(doc, doc.txt.y - 1);
}


sub mp.move_down(doc)
/* moves one line down */
{
	mp.set_y(doc, doc.txt.y + 1);
}


sub mp.move_pgup(doc)
/* moves one page up */
{
	mp.set_y(doc, doc.txt.y - doc.window.ty);
}


sub mp.move_pgdn(doc)
/* moves one page down */
{
	mp.set_y(doc, doc.txt.y + doc.window.ty);
}


sub mp.move_left(doc)
/* moves one char left */
{
	mp.set_x(doc, doc.txt.x - 1);
}


sub mp.move_right(doc)
/* moves one char right */
{
	mp.set_x(doc, doc.txt.x + 1);
}


sub mp.move_bol(doc)
/* moves to the beginning of the line */
{
	doc.txt.x=0;
}


sub mp.move_eol(doc)
/* moves to the end of the line */
{
	doc.txt.x=size(doc.txt.lines[doc.txt.y]);
}


sub mp.move_bof(doc)
/* moves to the beginning of the file */
{
	doc.txt.x=0;
	doc.txt.y=0;
}


sub mp.move_eof(doc)
/* moves to the end of the file */
{
	doc.txt.y=size(doc.txt.lines) - 1;
	mp.move_eol(doc);
}


sub mp.break_line(doc)
/* breaks current line in two (inserts a newline) */
{
	local txt = doc.txt;
	local c, w;

	/* gets line where cursor is */
	c=txt.lines[txt.y];

	/* deletes from cursor to end of line */
	w=splice(c, NULL, txt.x, -1);

	/* set first part as current line */
	txt.lines[txt.y]=w[0];

	/* move to next line */
	txt.y++;

	/* insert a new line here */
	aexpand(txt.lines, txt.y, 1);

	/* if autoindenting... */
	if(mp.config.auto_indent)
	{
		/* extract leading blanks in the original line
		   and prepend them to the line to be inserted */
		w[1]=regex("/^[ \t]*/", c, 0) ~ w[1];
	}

	/* put second part there */
	txt.lines[txt.y]=w[1];

	/* move to bol */
	txt.x=0;
}


sub mp.join_line(doc)
/* joins the current line with the next one */
{
	local txt = doc.txt;

	if(txt.y < size(txt.lines))
	{
		/* concats current line with the next one */
		txt.lines[txt.y] = txt.lines[txt.y] ~ txt.lines[txt.y + 1];

		/* collapse */
		acollapse(txt.lines, txt.y + 1, 1);
	}
}


sub mp.insert(doc, str)
/* inserts a string into the cursor position */
{
	local txt = doc.txt;
	local w;

	/* splice and change */
	w=splice(txt.lines[txt.y], str, txt.x, 0);
	txt.lines[txt.y] = w[0];

	/* move right */
	txt.x += size(str);

	/* if wordwrapping... */
	if(mp.config.wordwrap > 0 && size(w[0]) > mp.config.wordwrap)
	{
		print("TBD\n");
	}
}


/* clipboard routines */

sub mp.unmark(doc)
{
	/* just destroy the mark */
	doc.txt.mark = NULL;
}


sub mp.mark(doc)
{
	local txt = doc.txt;

	if(txt.mark == NULL)
	{
		/* no mark; create one */
		txt.mark = {};
		txt.mark.bx = txt.x;
		txt.mark.by = txt.y;
		txt.mark.ex = txt.x;
		txt.mark.ey = txt.y;
	}
	else
	{
		/* mark exists; extend current one */
		if(txt.y < txt.mark.by ||
			(txt.y == txt.mark.by && txt.x < txt.mark.bx))
		{
			/* move the beginning of the block */
			txt.mark.bx = txt.x;
			txt.mark.by = txt.y;
		}
		else
		{
			/* move the end of the block */
			txt.mark.ex = txt.x;
			txt.mark.ey = txt.y;
		}
	}
}


sub mp.copy(doc)
{
	local txt = doc.txt;

	/* no mark? done */
	if(txt.mark == NULL) return;

	/* set the clipboard to an empty array */
	mp.clipboard = [];

	if(txt.mark.by == txt.mark.ey)
	{
		local w;

		/* block is just one line; take the inside
		   part and push it onto the clipboard */

		w=splice(txt.lines[txt.mark.by], NULL,
			txt.mark.bx, txt.mark.ex - txt.mark.bx);

		apush(mp.clipboard, w[1]);
	}
	else
	{
		local w, n;

		/* block has more than one line */

		/* take from the beginning to the end of the first line */
		n=txt.mark.by;
		w=splice(txt.lines[n], NULL, txt.mark.bx, -1);

		apush(mp.clipboard, w[1]);
		n++;

		/* take the central lines */
		while(n < txt.mark.ey)
			apush(mp.clipboard, txt.lines[n++]);

		/* take the last line */
		w=splice(txt.lines[n], NULL, 0, txt.mark.ex);
		apush(mp.clipboard, w[1]);
	}
}


sub mp.delete_mark(doc)
{
	local txt = doc.txt;

	/* no mark? done */
	if(txt.mark == NULL) return;

	/* move to the start of the block */
	txt.x=txt.mark.bx;
	txt.y=txt.mark.by;

	if(txt.mark.by == txt.mark.ey)
	{
		local w;

		/* block is just one line; delete the middle part */
		w=splice(txt.lines[txt.mark.by], NULL,
			txt.mark.bx, txt.mark.ex - txt.mark.bx);

		txt.lines[txt.mark.by] = w[0];
	}
	else
	{
		local w;

		/* block has more than one line */

		/* delete from the beginning to the end of the first line */
		w=splice(txt.lines[txt.mark.by], NULL, txt.mark.bx, -1);
		txt.lines[txt.mark.by] = w[0];

		/* delete from the beginning of the last line to
		   the end of the block */
		w=splice(txt.lines[txt.mark.ey], NULL, 0, txt.mark.ex);
		txt.lines[txt.mark.ey] = w[0];

		/* collapse the lines in between */
		acollapse(txt.lines, txt.mark.by + 1,
			txt.mark.ey - txt.mark.by - 1);

		/* finally join both lines */
		mp.join_line(doc);
	}

	mp.unmark(doc);
}


sub mp.cut(doc)
/* cut (copy + delete) selected mark */
{
	mp.copy(doc);
	mp.delete_mark(doc);
}


sub mp.paste(doc)
/* pastes from the clipboard into a text */
{
	local txt = doc.txt;
	local s;

	/* no clipboard? return */
	if(mp.clipboard == NULL)
		return;

	/* empty clipboard (rare, but possible)? return */
	if((s=size(mp.clipboard)) == 0)
		return;

	/* paste first line into current position */
	mp.insert(doc, mp.clipboard[0]);

	/* more than just one line? */
	if(s > 1)
	{
		/* break current line in two */
		mp.break_line(doc);

		/* insert last line */
		mp.insert(doc, mp.clipboard[s - 1]);
	}

	/* more than two lines? */
	if(s > 2)
	{
		local n=1;

		/* open room */
		aexpand(txt.lines, txt.y, s - 2);

		/* transfer middle lines */
		while(n < s - 1)
			txt.lines[txt.y++]=mp.clipboard[n++];
	}
}


/* file code */

sub mp.chomp(str)
/* chomps the end of file chars from a string */
{
	sregex("/" ~ mp.config.eol ~ "$/", str, NULL);
}


sub mp.load_file(doc, filename)
/* loads a file from disk */
{
	local f, l;
	local txt = doc.txt;

	/* open or fail */
	if((f=open(filename, "r")) == NULL)
		return(0);

	/* set lines as an empty array */
	txt.lines = [];

	/* read the file into it */
	while((l=read(f)) != NULL)
		apush(txt.lines, mp.chomp(l));

	close(f);

	mp.move_bof(doc);

	return(1);
}


sub mp.new()
/* creates a new text */
{
	local doc, txt;

	txt = {};
	txt.x = 0;
	txt.y = 0;
	txt.vx = 0;
	txt.vy = 0;
	txt.lines = [];

	doc = {};
	doc.txt = txt;

	doc.undo = [];

	doc.window = {};

	doc.syntax = NULL;

	return(doc);
}


sub mp.store_undo(doc)
/* stores the current txt in the undo queue */
{
	aqueue(doc.undo, clone(doc.txt), mp.config.undo_levels);
}


sub mp.undo(doc)
/* undoes last operation */
{
	local txt;

	if(txt = apop(doc.undo)) doc.txt = txt;
}


/*******************************************************/

mp.keycodes = {
	'cursor-left'	=>	'move-left',
	'cursor-right'	=>	'move-right',
	'cursor-up'	=>	'move-up',
	'cursor-down'	=>	'move-down',
	'page-up'	=>	'move-pgup',
	'page-down'	=>	'move-pgdn',
	'home'		=>	'move-bol',
	'end'		=>	'move-eol',

	'enter'		=>	'insert-line',

	'f3'		=>	'seek-next',
	'f8'		=>	'unmark',
	'f9'		=>	'mark',

	'ctrl-a'	=>	NULL,
	'ctrl-b'	=>	NULL,
	'ctrl-c'	=>	'copy-mark',
	'ctrl-d'	=>	NULL,
	'ctrl-e'	=>	NULL,
	'ctrl-f'	=>	'seek',
	'ctrl-g'	=>	'goto',
	'ctrl-h'	=>	NULL,
	'ctrl-i'	=>	'insert-tab',
	'ctrl-j'	=>	NULL,
	'ctrl-k'	=>	NULL,
	'ctrl-l'	=>	NULL,
	'ctrl-m'	=>	'insert-line',
	'ctrl-n'	=>	'new',
	'ctrl-o'	=>	'open',
	'ctrl-p'	=>	NULL,
	'ctrl-q'	=>	'exit',
	'ctrl-r'	=>	'replace',
	'ctrl-s'	=>	'save',
	'ctrl-t'	=>	NULL,
	'ctrl-u'	=>	NULL,
	'ctrl-v'	=>	'paste-mark',
	'ctrl-w'	=>	'close',
	'ctrl-x'	=>	'cut-mark',
	'ctrl-y'	=>	'delete-line',
	'ctrl-z'	=>	'undo'
};

mp.functions = {

	'move-left'	=>	sub (k) { mp.move_left(k); },
	'move-right'	=>	sub (k) { mp.move_right(k); },
	'move-up'	=>	sub (k) { mp.move_up(k); },
	'move-down'	=>	sub (k) { mp.move_down(k); },
	'move-pgup'	=>	sub (k) { mp.move_pgup(k); },
	'move-pgdn'	=>	sub (k) { mp.move_pgdn(k); },
	'move-bol'	=>	sub (k) { mp.move_bol(k); },
	'move-eol'	=>	sub (k) { mp.move_eol(k); },

	'unmark'	=>	sub (k) { mp.unmark(k); },
	'mark'		=>	sub (k) { mp.mark(k); },
	'copy-mark'	=>	sub (k) { mp.copy(k); mp.unmark(k); },
	'paste-mark'	=>	sub (k) { mp.store_undo(k); mp.paste(k); },
	'cut-mark'	=>	sub (k) { mp.store_undo(k); mp.cut(k); },

	'insert-line'	=>	sub (k) { mp.store_undo(k); mp.break_line(k); },

	'undo'		=>	sub (k) { mp.undo(k); },

	'exit'		=>	sub (k) { mp.exit_requested = 1; }

};

mp.exit_requested = 0;

sub main_loop(filename)
{
	local d, v;

	d = mp.new();

	if(mp.load_file(d, filename))
	{
		local k;

		nc_startup();
		d.window.tx = COLS;
		d.window.ty = LINES;

		/* HACK: hardcoded synhi */
		d.syntax = { 'hl_words' => { 'return' => 6 },
			     'comments' => [
				'|/\*[^*]*\*+([^/*][^*]*\*+)*/|', /* C-like */
				'|/\*[^*]*[^/]*$|',		/* C-like, incomplete */
				'|//.*$|m',			/* C++ */
				'/^\s*#[a-z]+/m'		/* CPP directives */
				],
			     'quotes'   => [
			/* from http://ad.hominem.org/log/2005/05/quoted_strings.php */
				'/"([^"\\]*(\\.[^"\\]*)*)"/',
				"/'([^'\\]*(\\.[^'\\]*)*)'/",
				"/\b-?[0-9]+\b/",
				"/\b[[:upper:]_]+\b/"
				]

			};


		while (! mp.exit_requested) {

			local f;

			nc_draw(d);

			if((f = mp.keycodes[nc_getkey()]) != NULL)
			{
				if((f = mp.functions[f]) != NULL)
					f(d);
			}
		}

		nc_shutdown();

		dump(v);
	}
	else
		print("Can't open '", filename, "'\n");
}


if(size(ARGV) > 1)
	main_loop(ARGV[1]);
else
	print("Usage: mp-4 {file}\n");
