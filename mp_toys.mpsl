/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Useless things.

    Copyright (C) 1991-2009 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://www.triptico.com

*/

sub mp.maze(doc, keycode)
{
	local tx = mp.window.tx;
	local ty = mp.window.ty;

	if (doc == NULL)
		doc = mp.open('<maze>');

	local maze = doc.maze;

	if (maze == NULL || maze.tx != tx || maze.ty != ty) {
		/* new or changed: rebuild everything */
		maze = {};
		maze.tx = tx;
		maze.ty = ty;
		doc.maze = maze;

		/* ensure odd size */
		if (!(tx & 1))
			tx--;
		if (!(ty & 1))
			ty--;

		/* init */
		maze.map = map(sub { map(sub { '#'; }, [1 .. tx]); }, [1 .. ty]);

		/* build */
		local x = 1;
		local y = 1;
		local stack = [];

		while (1) {
			local d = [];

			/* clear */
			maze.map[y][x] = ' ';

			foreach (t, [[0, -1], [1, 0], [0, 1], [-1, 0]]) {
				/* can space be opened? */
				local ny = y + t[0] * 2;
				local nx = x + t[1] * 2;

				if (nx > 0 && ny > 0 && maze.map[ny][nx] eq '#')
					push(d, t);
			}

			if (size(d)) {
				/* more than one way? stack this position */
				if (size(d) > 1)
					push(stack, [y, x]);

				/* pick one direction at random and move there */
				local m = d[random(size(d))];

				y += m[0];
				x += m[1];

				maze.map[y][x] = ' ';

				y += m[0];
				x += m[1];
			}
			else {
				/* no way from here: pop previous position */
				if ((d = pop(stack)) == NULL)
					break;

				y = d[0];
				x = d[1];
			}
		}

		maze.x = 1 + random(tx / 2) * 2;
		maze.y = 1 + random(ty / 2) * 2;

		maze.map[maze.y][maze.x] = '@';

		x = 1 + random(tx / 2) * 2;
		y = 1 + random(ty / 2) * 2;

		maze.map[y][x] = 'X';

		doc.keypress = sub(d, k) { mp.maze(d, k); };

		doc.paint = sub(d) { map(sub(e) { [8, join(e)];}, d.maze.map); };
	}

	local x = maze.x;
	local y = maze.y;

	maze.map[y][x] = ' ';

	if (keycode eq 'cursor-up')
		y--;
	if (keycode eq 'cursor-down')
		y++;
	if (keycode eq 'cursor-left')
		x--;
	if (keycode eq 'cursor-right')
		x++;

	if (maze.map[y][x] eq 'X') {
		mp.alert("You won!");
		doc.maze = NULL;
		return doc;
	}

	if (maze.map[y][x] eq ' ') {
		maze.x = x;
		maze.y = y;
	}

	maze.map[maze.y][maze.x] = '@';

	return doc;
}
