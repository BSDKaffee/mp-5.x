/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Useless things.

    Copyright (C) 1991-2012 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://www.triptico.com

*/

sub mp.maze(doc, keycode)
{
	local tx = mp.window.tx;
	local ty = mp.window.ty;

	if (doc == NULL)
		doc = mp.open('<maze>');

	local maze = doc.maze;

	if (maze == NULL || maze.tx != tx || maze.ty != ty) {
		/* new or changed: rebuild everything */
		maze = {};
		maze.tx = tx;
		maze.ty = ty;
		doc.maze = maze;

		/* ensure odd size */
		if (!(tx & 1))
			tx--;
		if (!(ty & 1))
			ty--;

		/* init */
		maze.map = map(
            [1 .. ty],
            sub {
                map(
                    [1 .. tx],
                    sub { '#'; }
                );
            }
        );

		/* build */
		local x = 1;
		local y = 1;
		local stack = [];

		while (1) {
			local d = [];

			/* clear */
			maze.map[y][x] = ' ';

			foreach (t, [[0, -1], [1, 0], [0, 1], [-1, 0]]) {
				/* can space be opened? */
				local ny = y + t[0] * 2;
				local nx = x + t[1] * 2;

				if (nx > 0 && ny > 0 && maze.map[ny][nx] eq '#')
					push(d, t);
			}

			if (size(d)) {
				/* more than one way? stack this position */
				if (size(d) > 1)
					push(stack, [y, x]);

				/* pick one direction at random and move there */
				local m = d[random(size(d))];

				y += m[0];
				x += m[1];

				maze.map[y][x] = ' ';

				y += m[0];
				x += m[1];
			}
			else {
				/* no way from here: pop previous position */
				if ((d = pop(stack)) == NULL)
					break;

				y = d[0];
				x = d[1];
			}
		}

		maze.x = 1 + random(tx / 2) * 2;
		maze.y = 1 + random(ty / 2) * 2;

		maze.map[maze.y][maze.x] = '@';

		x = 1 + random(tx / 2) * 2;
		y = 1 + random(ty / 2) * 2;

		maze.map[y][x] = 'X';

		doc.keypress = sub(d, k) { mp.maze(d, k); };

		doc.paint = sub(d) { map(d.maze.map, sub(e) { [8, join(e)];}); };
	}

	local x = maze.x;
	local y = maze.y;

	maze.map[y][x] = ' ';

	if (keycode eq 'cursor-up')
		y--;
	if (keycode eq 'cursor-down')
		y++;
	if (keycode eq 'cursor-left')
		x--;
	if (keycode eq 'cursor-right')
		x++;

	if (maze.map[y][x] eq 'X') {
		mp.alert("You won!");
		doc.maze = NULL;
		return mp.maze(doc);
	}

	if (maze.map[y][x] eq ' ') {
		maze.x = x;
		maze.y = y;
	}

	maze.map[maze.y][maze.x] = '@';

    mp.undo(doc);

	return doc;
}


sub mp.pipes(doc, keycode)
{
    local tx = mp.window.tx;
    local ty = mp.window.ty;

    if (doc == NULL)
        doc = mp.open('<pipes>');

    local pipes = doc.pipes;

    if (pipes == NULL || pipes.tx != tx || pipes.ty != ty) {
        local wx = int((tx - 2) / 3);
        local wy = int(((ty - 1) / 3) - 1);

        pipes = {
            x:      0,
            y:      1,
            tx:     tx,
            ty:     ty,
            wx:     wx,
            wy:     wy,
            sx:     random(wx),
            dir:    [[0, -1], [1, 0], [0, 1], [-1, 0]],
            pieces: [
                {
                    shape:  [' # ', ' ##', '   '],
                    out:    [-1, -1, 3, 2],
                    next:   1
                },
                {
                    shape:  ['   ', ' ##', ' # '],
                    out:    [1, -1, -1, 2],
                    next:   2
                },
                {
                    shape:  ['   ', '## ', ' # '],
                    out:    [3, 2, -1, -1],
                    next:   3
                },
                {
                    shape:  [' # ', '## ', '   '],
                    out:    [-1, 0, 3, -1],
                    next:   0
                },
                {
                    shape:  [' # ', ' # ', ' # '],
                    out:    [0, -1, 2, -1],
                    next:   5
                },
                {
                    shape:  ['   ', '###', '   '],
                    out:    [-1, 1, -1, 3],
                    next:   4
                },
                { /* blank */
                    shape:  ['   ', '   ', '   '],
                    out:    [-1, -1, -1, -1],
                    next:   6
                },
                { /* entry pipe */
                    shape:  ['| |', '\ /', ' # '],
                    out:    [-1, -1, 2, -1],
                    next:   7
                },
                { /* out pipe */
                    shape:  [' # ', ' # ', '/ \'],
                    out:    [-1, -1, -1000, -1],
                    next:   8
                }
            ]
        };

        pipes.map = map([1 .. wy - 1],
            sub {map([1 .. wx], sub { random(size(pipes.pieces) - 3); });}
        );

        /* add first line */
        ins(pipes.map, map([1 .. wx], sub { 6; }), 0);
        pipes.map[0][pipes.sx] = 7;

        /* add last line */
        push(pipes.map, map([1 .. wx], sub { 6; }));
        pipes.map[wy][5] = 8;
        pipes.map[wy][wx - 5] = 8;

        doc.pipes = pipes;

        /* handlers */
        doc.keypress    = sub (d, k) { mp.pipes(d, k); };

        doc.paint       = sub (d) {
            local out = [];
            local pipes = d.pipes;

            foreach (n, [0 .. (pipes.wy)]) {
                local l0 = [];
                local l1 = [];
                local l2 = [];

                foreach (m, [0 .. (pipes.wx - 1)]) {
                    local p = pipes.map[n][m];
                    local s = pipes.pieces[p].shape;
                    local c;

                    if (n == pipes.y && m == pipes.x)
                        c = mp.colors.cursor.attr;
                    else
                        c = pipes.attr[n][m] || mp.colors.normal.attr;

                    push(l0, c, s[0]);
                    push(l1, c, s[1]);
                    push(l2, c, s[2]);
                }

                push(out, l0, l1, l2);
            }

            return out;
        };
    }

	local x = pipes.x;
	local y = pipes.y;

	if (keycode eq 'cursor-up' && y > 1)
		y--;
	if (keycode eq 'cursor-down'&& y < pipes.wy - 1)
		y++;
	if (keycode eq 'cursor-left' && x > 0)
		x--;
	if (keycode eq 'cursor-right' && x < pipes.wx - 1)
		x++;
    if (keycode eq 'enter') {
        local n = pipes.map[y][x];

        pipes.map[y][x] = pipes.pieces[n].next;
    }

    pipes.x = x;
    pipes.y = y;

    /* reset attributes */
    pipes.attr = map([1 .. pipes.wy], sub { [];});

    /* the water input is blue */
    pipes.attr[0][pipes.sx] = mp.colors.quotes.attr;

    /* calculate the path */
    local px = pipes.sx;
    local py = 0;
    local c = 2; /* downwards */
    local p;

    /* while there is a valid path */
    while ((p = pipes.pieces[pipes.map[py][px]]) && (c = p.out[c]) >= 0) {
        /* mark as valid path */
        pipes.attr[py][px] = mp.colors.quotes.attr;

        /* move in new direction */
        px += pipes.dir[c][0];
        py += pipes.dir[c][1];
    }

    mp.undo(doc);

    return doc;
}
