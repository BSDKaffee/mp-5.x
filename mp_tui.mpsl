/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Text User Interface.

    Copyright (C) 1991-2006 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://www.triptico.com

*/

/* main TUI namspace */
mp.tui = {};

/* colors */

mp.colors.menu = { 'text' => [ 'white', 'blue' ], 'flags' => [ 'bright' ] };

/* code */

sub mp.tui.prompt(prompt)
/* draw a prompt on screen */
{
	/* delete all possible newlines */
	prompt = sregex("/\n/g", prompt, ' ');

	mp.tui.move(0, mp.window.ty - 1, 1);
	mp.tui.addstr(prompt);
	mp.tui.refresh();
}


sub mp.tui.readline(prompt, history, default, flags)
/* the readline function, with special functionality in 'flags' */
{
	local c, r, h, i, v;

	mp.tui.prompt(prompt ~ ' ');
	c = mp.tui.getxy();
	r = default || '';

	/* get the history stack */
	h = mp.get_history(history);

	/* create the clipping regular expression */
	v = '/.{1,' ~ (mp.window.tx - c[0] - 1) ~ '}$/';

	i = 0;

	while(1)
	{
		local k, s;

		/* builds the string */
		s = regex(v, r) || '';

		/* if it's a password, change everything to asterisks */
		if(flags.password)
			s = sregex('/./g', s, flags.password);

		/* draws the string */
		mp.tui.move(c[0], c[1], 1);
		mp.tui.addstr(s);

		k = mp.tui.getkey();

		if(k eq 'enter') break;
		else
		if(k eq 'escape') { r = NULL; break; }
		else
		if(k eq 'backspace') r = sregex('/.$/', r);
		else
		if(k eq 'ctrl-u') r = '';
		else
		if(k eq 'space') r = r ~ ' ';
		else
		if(k eq 'cursor-up' && size(h)) { i--; r = h[i % size(h)]; }
		else
		if(k eq 'cursor-down' && size(h)) { i++; r = h[i % size(h)]; }
		else
		if(size(k) == 1)
			r = r ~ k;
	}

	/* if a string was accepted, store in the history */
	if(h != NULL && size(r) && h[-1] ne r)
		push(h, r);

	return(r);
}


/* interface */

sub mp.drv.alert(msg)
{
	mp.tui.prompt(msg ~ L(" [ENTER]"));

	while(mp.tui.getkey() ne 'enter');
}


sub mp.drv.confirm(msg)
{
	local y, n;
	local ret = NULL;

	/* get the initials for localized 'Yes' and 'No' */
	y = regex('/^./', L("Yes"));
	n = regex('/^./', L("No"));

	mp.tui.prompt(msg ~ ' [' ~ y ~ '/' ~ n ~ ']');

	while(ret == NULL)
	{
		local k = mp.tui.getkey();

		if(regex('/^' ~ y ~ '$/i', k)) ret = 1;
		if(regex('/^' ~ n ~ '$/i', k)) ret = 2;
		if(k eq 'escape') ret = 0;
	}

	return(ret);
}


sub mp.drv.readline(prompt, history, default)
{
	mp.tui.readline(prompt, history, default);
}


sub mp.drv.readline_search(prompt, default)
{
	mp.drv.readline(prompt, 'search', default);
}


sub mp.drv.readline_replace(this_p, this_d, that_p, that_d)
{
	local r1, r2;
	local r = NULL;

	if((r1 = mp.readline_search(this_p, this_d)) != NULL &&
	   (r2 = mp.readline(that_p, 'replace', that_d)) != NULL)
			r = [ r1, r2 ];

	return(r);
}


sub mp.drv.readline_password(prompt)
{
	mp.tui.readline(prompt, NULL, NULL, { 'password' => '*' } );
}


sub mp.drv.openfile(prompt)
{
	mp.drv.readline(prompt, 'openfile');
}


sub mp.drv.savefile(prompt)
{
	mp.drv.readline(prompt, 'savefile');
}


sub mp.drv.list(prompt, data, pos)
{
	local vy, ty, r;

	mp.tui.move(0, 0, 1);
	mp.tui.addstr(prompt);

	vy = 0;
	ty = mp.window.ty - 1;

	/* clipping regex */
	r = '/^.{1,' ~ (mp.window.tx) ~ '}/';

	if(pos == NULL) pos = 0;

	while(1)
	{
		local k, n;

		/* limits for pos */
		if(pos < 0) pos = 0;
		if(pos >= size(data)) pos = size(data) - 1;

		/* limits for vy */
		if(pos < vy) vy = pos;
		if(vy + ty <= pos) vy = pos - ty + 1;

		/* draw all the lines */
		n = 0;
		while(n < ty)
		{
			local l = data[n + vy];

			/* no more data? */
			if(l == NULL) break;

			mp.tui.move(0, n + 1, 1);

			if(n + vy == pos)
				mp.tui.attr(mp.colors.cursor.attr);
			else
				mp.tui.attr(mp.colors.normal.attr);

			mp.tui.addstr(regex(r,
				sprintf("%-" ~ mp.window.tx ~ "s", l)));

			n++;
		}

		/* clean the rest of lines */
		while(n < ty)
		{
			mp.tui.move(0, n + 1, 1);
			n++;
		}

		k = mp.tui.getkey();

		if(k eq 'cursor-up') pos--;
		else
		if(k eq 'cursor-down') pos++;
		else
		if(k eq 'page-up') pos -= ty;
		else
		if(k eq 'page-down') pos += ty;
		else
		if(k eq 'home') pos = 0;
		else
		if(k eq 'end') pos = size(data) - 1;
		else
		if(k eq 'enter') break;
		else
		if(k eq 'escape') { pos = NULL; break; }
	}

	return(pos);
}


sub mp.drv.menu()
{
	local mx = 0;
	local action = NULL;
	local key = NULL;

	while(action == NULL && key ne 'escape')
	{
		local pos, mo, my;
		local n = 0;

		/* wrap */
		if(mx < 0) mx = size(mp.menu) - 1;
		if(mx >= size(mp.menu)) mx = 0;

		/* draw the menu bar */
		mp.tui.attr(mp.colors.menu.attr);
		mp.tui.move(0, 0, 1);

		while(n < size(mp.menu))
		{
			/* get the label */
			local l = mp.menu[n][0];

			/* strip (by now) the & */
			l = sregex('/&/g', l, NULL);

			mp.tui.attr(mp.colors.menu.attr);
			mp.tui.addstr('   ');

			if(n == mx)
			{
				pos = mp.tui.getxy();
				mp.tui.attr(mp.colors.cursor.attr);
			}

			mp.tui.addstr(l);

			n++;
		}

		/* get the menu options */
		mo = mp.menu[mx][1];

		/* calculate panel optimal dimensions */
		pos[2] = 0;

		foreach(n, mo)
		{
			local l = L(mp.actdesc[n]);

			if(size(l) > pos[2])
				pos[2] = size(l);
		}

		/* if the panel will surpass the right margin,
		   move to the left */
		if(pos[0] + pos[2] > mp.window.tx)
			pos[0] = pos[2] - mp.window.tx;

		mp.tui.refresh();
		mp.tui.openpanel(pos[0], 1, pos[2] + 2, size(mo) + 2);

		my = 0;

		while(key ne 'escape')
		{
			/* draw the options */
			n = 0;
			while(n < size(mo))
			{
				local l = L(mp.actdesc[mo[n]]);

				/* set color */
				if(n == my)
					mp.tui.attr(mp.colors.cursor.attr);
				else
					mp.tui.attr(mp.colors.menu.attr);

				if(l != NULL)
				{
					mp.tui.move(1, 1 + n, 1);
					mp.tui.addstr(sprintf("%-" ~ pos[2] ~ "s", l));
				}

				n++;
			}

			mp.tui.refresh();

			key = mp.tui.getkey();

			if(key eq 'cursor-up')
			{
				/* move up avoiding separators */
				while(1)
				{
					if(--my < 0)
						my = size(mo) - 1;

					if(mo[my] ne '-') break;
				}
			}
			else
			if(key eq 'cursor-down')
			{
				/* move down avoiding separators */
				while(1)
				{
					if(++my >= size(mo))
						my = 0;

					if(mo[my] ne '-') break;
				}
			}
			else
			if(key eq 'cursor-right') { mx++; break; }
			else
			if(key eq 'cursor-left') { mx--; break; }
			else
			if(key eq 'enter') { action = mo[my]; break; }
		}

		mp.tui.closepanel();
	}

	if(action != NULL)
		mp.process_action(action);

	return(NULL);
}



/* returns the main namespace */
mp.tui;
