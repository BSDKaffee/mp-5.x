/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Text User Interface.

    Copyright (C) 1991-2006 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://www.triptico.com

*/

/* main TUI namspace */
mp.tui = {};

/* code */

sub mp.tui.prompt(prompt)
/* draw a prompt on screen */
{
	/* delete all possible newlines */
	prompt = sregex("/\n/g", prompt, ' ');

	mp.tui.move(0, mp.window.ty - 1, 1);
	mp.tui.addstr(prompt);
	mp.tui.refresh();
}


sub mp.drv.alert(msg)
{
	mp.tui.prompt(msg ~ L(" [ENTER]"));

	while(mp.tui.getkey() ne 'enter');
}


sub mp.drv.confirm(msg)
{
	local y, n;
	local ret = NULL;

	/* get the initials for localized 'Yes' and 'No' */
	y = regex('/^./', L("Yes"));
	n = regex('/^./', L("No"));

	mp.tui.prompt(msg ~ ' [' ~ y ~ '/' ~ n ~ ']');

	while(ret == NULL)
	{
		local k = mp.tui.getkey();

		if(regex('/^' ~ y ~ '$/i', k)) ret = 1;
		if(regex('/^' ~ n ~ '$/i', k)) ret = 2;
		if(k eq 'escape') ret = 0;
	}

	return(ret);
}


sub mp.drv.readline(prompt, history, default)
{
	local c, r, h, i, v;

	mp.tui.prompt(prompt ~ ' ');
	c = mp.tui.getxy();
	r = default || '';

	/* get the history stack */
	h = mp.get_history(history);

	/* create the clipping regular expression */
	v = '/.{1,' ~ (mp.window.tx - c[0] - 1) ~ '}$/';

	i = 0;

	while(1)
	{
		local k;

		/* draws the string */
		mp.tui.move(c[0], c[1], 1);
		mp.tui.addstr(regex(v, r) || '');

		k = mp.tui.getkey();

		if(k eq 'enter') break;
		else
		if(k eq 'escape') { r = NULL; break; }
		else
		if(k eq 'backspace') r = sregex('/.$/', r);
		else
		if(k eq 'ctrl-u') r = '';
		else
		if(k eq 'space') r = r ~ ' ';
		else
		if(k eq 'cursor-up' && size(h)) { i--; r = h[i % size(h)]; }
		else
		if(k eq 'cursor-down' && size(h)) { i++; r = h[i % size(h)]; }
		else
		if(size(k) == 1)
			r = r ~ k;
	}

	/* if a string was accepted, store in the history */
	if(size(r) && h[-1] ne r)
		push(h, r);

	return(r);
}


sub mp.drv.readline_search(prompt)
{
	mp.drv.readline(prompt, 'search');
}


sub mp.drv.openfile(prompt)
{
	mp.drv.readline(prompt, 'openfile');
}


sub mp.drv.savefile(prompt)
{
	mp.drv.readline(prompt, 'savefile');
}


sub mp.drv.list(prompt, data, pos)
{
	local vy, ty;

	mp.tui.move(0, 0, 1);
	mp.tui.addstr(prompt);

	vy = 0;
	ty = mp.window.ty - 1;

	if(pos == NULL) pos = 0;

	while(1)
	{
		local k, n;

		if(pos < vy) vy = pos;
		if(vy + ty <= pos) vy = pos - ty + 1;

		/* draw all the lines */
		n = 0;
		while(n < ty)
		{
			local l = data[n + vy];

			/* no more data? */
			if(l == NULL) break;

			mp.tui.move(0, n + 1, 1);

			if(n + vy == pos)
				mp.tui.attr(mp.colors.cursor.attr);
			else
				mp.tui.attr(mp.colors.normal.attr);

			mp.tui.addstr(l);

			n++;
		}

		/* clean the rest of lines */
		while(n < ty)
		{
			mp.tui.move(0, n + 1, 1);
			n++;
		}

		k = mp.tui.getkey();

		if(k eq 'cursor-up' && pos > 0) pos--;
		else
		if(k eq 'cursor-down' && pos < size(data) - 1) pos++;
		else
		if(k eq 'page-up') { pos -= ty; if(pos < 0) pos = 0; }
		else
		if(k eq 'page-down') { pos += ty; if(pos >= size(data)) pos = size(data) - 1; }
		else
		if(k eq 'home') { pos = 0; }
		else
		if(k eq 'end') { pos = size(data) - 1; }
		else
		if(k eq 'enter') break;
		else
		if(k eq 'escape') { pos = -1; break; }
	}

	return(pos);
}


/* returns the main namespace */
mp.tui;
