/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Copyright (C) 1991-2012 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://triptico.com

*/


/** startup: language first **/

/* L(x) is the same as gettext(x) */
L = gettext;

/* LL(x) is the same as x */
sub LL(x) { x; }

/* set gettext() domain */
gettext_domain('minimum-profit', APPDIR ~ 'locale');

/* test if gettext() can do a basic translation */
if (gettext('&File') eq '&File' && ENV.LANG) {
    /* no; try alternatives using the LANG variable */
    local v = [ sregex(ENV.LANG, '!/!g') ]; /* es_ES.UTF-8 */
    push(v, shift(split(v[-1], '.')));      /* es_ES */
    push(v, shift(split(v[-1], '_')));      /* es */

    foreach (l, v) {
        eval('load("lang/' ~ l ~ '.mpsl");');

        if (ERROR == NULL)
            break;
    }

    ERROR = NULL;
}


/* configuration */

mp.config = {
    undo_levels:            100,
    word_wrap:              0,
    auto_indent:            0,
    tab_size:               8,
    tabs_as_spaces:         0,
    dynamic_tabs:           0,
    unlink:                 1,
    case_sensitive_search:  1,
    global_replace:         0,
    preread_lines:          60,
    mark_eol:               0,
    maximize:               0,
    keep_eol:               1,
    smart_bol:              1
};

/* default end of line, system dependent */
if (mp.drv.id eq 'win32')
	mp.config.eol = "\r\n";
else
	mp.config.eol = "\n";

/* status line */
mp.config.status_format = "%m%n %x,%y [%l] %R%O %s %e %t";

/* a regex for selecting words */
mp.word_regex = "/[[:alnum:]_]+/i";

/* if it does not work (i.e. not GNU regex), fall back */
if (regex("test", mp.word_regex) == NULL)
	mp.word_regex = '/[A-Z_][A-Z0-9_]*/i';

/* document list */
mp.docs = [];
mp.active_i = 0;

/* allowed color names (order matters, match the Unix curses one) */
mp.color_names = [
    "default",
    "black", "red", "green", "yellow",
    "blue", "magenta", "cyan", "white"
];

/* color definitions */
mp.colors = {
    normal: {
        text:   [ 'default', 'default' ],
        gui:    [ 0x000000, 0xffffff ]
    },
    cursor: {
        text:   [ 'default', 'default' ],
        gui:    [ 0x000000, 0xffffff ],
        flags:  [ 'reverse' ]
    },
    selection: {
        text:   [ 'red', 'default' ],
        gui:    [ 0xff0000, 0xffffff ],
        flags:  [ 'reverse']
    },
    comments: {
        text:   [ 'green', 'default' ],
        gui:    [ 0x00cc77, 0xffffff ]
    },
    documentation: {
        text:   [ 'cyan', 'default' ],
        gui:    [ 0x8888ff, 0xffffff ]
    },
    quotes: {
        text:   [ 'blue', 'default' ],
        gui:    [ 0x0000ff, 0xffffff ],
        flags:  [ 'bright' ]
    },
    matching: {
        text:   [ 'black', 'cyan' ],
        gui:    [ 0x000000, 0xffff00 ]
    },
    word1: {
        text:   [ 'green', 'default' ],
        gui:    [ 0x00aa00, 0xffffff ],
        flags:  [ 'bright' ]
    },
    word2: {
        text:   [ 'red', 'default' ],
        gui:    [ 0xff6666, 0xffffff ],
        flags:  [ 'bright' ]
    },
    tag: {
        text:   [ 'cyan', 'default' ],
        gui:    [ 0x8888ff, 0xffffff ],
        flags:  [ 'underline' ]
    },
    spell: {
        text:   [ 'red', 'default' ],
        gui:    [ 0xff8888, 0xffffff ],
        flags:  [ 'bright', 'underline' ]
    },
    search: {
        text:   [ 'black', 'green' ],
        gui:    [ 0x000000, 0x00cc77 ]
    }
};

/* hash of specially coloured words */
mp.word_color = {};

mp.keycodes = {
    ansi: {}
};

mp.actions = {};

mp.actdesc = {};

mp.history = {};


/** the menu **/

mp.menu = [
    [
        LL("&File"), [
            'new', 'open', 'save', 'save_as', 'close', 'revert',
            'open_under_cursor',
            '-', 'hex_view',
            '-', 'set_password',
            '-', 'open_config_file', 'open_templates_file',
            '-', 'sync',
            '-', 'save_session', 'load_session',
            '-', 'exit'
        ]
    ],
    [
        LL("&Edit"), [
            'undo', 'redo', '-',
            'cut_mark', 'copy_mark', 'paste_mark', 'delete_mark',
            'delete_line', 'cut_lines_with_string', '-',
            'mark',	'mark_vertical', 'unmark', 'mark_all', '-',
            'insert_template', 'insert_next_item', '-',
            'word_wrap_paragraph', 'join_paragraph', '-',
            'exec_command', 'filter_selection', '-',
            'exec_action', 'eval', 'eval_doc'
        ]
    ],
    [
        LL("&Search"), [
            'seek', 'seek_next', 'seek_prev', 'replace', '-',
            'complete', '-',
            'seek_misspelled', 'ignore_last_misspell', '-',
            'seek_repeated_word', '-',
            'find_tag', 'complete_symbol', '-', 'grep'
        ]
    ],
    [
        LL("&Go to"), [
            'next', 'prev',
            'move_bof', 'move_eof', 'move_bol', 'move_eol',
            'goto', 'move_word_right', 'move_word_left',
            'section_list',
            '-', 'document_list'
        ]
    ],
    [
        LL("&Options"), [
            'record_macro', 'play_macro', '-',
            'encoding', 'tab_options', 'line_options',
            'repeated_words_options', 'toggle_spellcheck', '-',
            'word_count', '-',
            'zoom_in', 'zoom_out', '-',
            'pipes', '-', 'check_for_updates', 'about'
        ]
    ]
];

mp.actions_by_menu_label = {};


/** MP base class **/

mp_base = {
    name:           'MP',
    keycodes:       {},
    actions:        {},
    keypress:       sub (doc, key) { doc; },
    paint:          sub (doc, opt) { return []; },
    pre_event:      sub (doc, key) { key; },
    post_event:     sub (doc, key) { doc; },
    query_close:    sub (doc) { 1; },
    get_name:       sub (doc) { name; },
    get_status:     sub (doc) { name; }
};


/** MP document class **/

mp_doc = new(mp_base, {
    name:           L("<unnamed>"),
    txt: {
        x:      0,
        y:      0,
        vx:     0,
        vy:     0,
        mod:    0,
        lines:  [ '' ]
    },
    undo_q:     [],
    redo_q:     [],
    syntax:     NULL,

    /* rendering function for MP docs in mp_core.c */
    paint:      mp_c.render,

    busy:       sub (doc, b) { mp.busy(b); return doc; }
});



/** code **/

/**
 * mp.redraw - Triggers a redraw on the next cycle.
 *
 * Triggers a full document redraw in the next cycle.
 */
sub mp.redraw()
{
	/* just increment the redraw trigger */
	mp.redraw_counter++;
}


sub mp.active()
/* returns the active document */
{
    /* if there is a list of pending files to open, do it */
    while (size(mp.active_pending))
        mp.actions.open(NULL, pop(mp.active_pending));

    /* empty document list? create a new, empty one */
    if (size(mp.docs) == 0)
        mp.actions.new();

    /* get active document */
    return mp.docs[mp.active_i];
}


sub mp.process_action(action)
/* processes an action */
{
    local f, doc;

    doc = mp.active();

    f = doc.actions[action] || mp.actions[action];

    if (f != NULL)
        f(doc);
    else {
        mp.message = {
            timeout:    time() + 2,
            string:     sprintf(L("Unknown action '%s'"), action)
        };
    }

    return doc;
}


sub mp.process_event(k)
/* processes a key event */
{
    local doc = mp.active();

    /* notify the document that an event is to be processed */
    k = doc->pre_event(k);

    if (k != NULL) {
        /* get the action or next keycode from the possible sources */
        local a = mp.keycodes_t[k] || doc.keycodes[k] || mp.keycodes[k];

        mp.keycodes_t = NULL;
    
        /* get the action asociated to the keycode */
        if (a != NULL) {
            /* if it's a hash, store for further testing */
            if (is_hash(a))
                mp.keycodes_t = a;
            else {
                /* if it's executable, run it */
                if (is_exec(a))
                    a(doc);
                else
                /* if it's an array, process it sequentially */
                if (is_array(a))
                    foreach(l, a)
                        mp.process_action(l);
                else
                    mp.process_action(a);
            }
        }
        else
            doc->keypress(k);
    
        mp.shift_pressed = NULL;

        doc->post_event(k);
    }

    return NULL;
}


sub mp.build_status_line()
/* returns the string to be drawn in the status line */
{
    local r;

    if (mp.message) {
        r = mp.message.string;

        /* is the message still active? */
        if (mp.message.timeout <= time())
            mp.message = NULL;
    }
    else
        r = mp.active()->get_status();

    return r;
}


sub mp.backslash_codes(s, d)
/* encodes (d == 0) or decodes (d == 1) backslash codes
   (like \n, \r, etc.) */
{
	d && sregex(s, "/[\r\n\t]/g", { "\r" => '\r', "\n" => '\n', "\t" => '\t'}) ||
		 sregex(s, "/\\\\[rnt]/g", { '\r' => "\r", '\n' => "\n", '\t' => "\t"});
}


sub mp.long_op(func, a1, a2, a3, a4)
/* executes a potentially long function */
{
	local r;

	mp.busy(1);
	r = func(a1, a2, a3, a4);
	mp.busy(0);

	return r;
}


sub mp.get_history(key)
/* returns a history for the specified key */
{
	if (mp.history[key] == NULL)
		mp.history[key] = [];

    return mp.history[key];
}


sub mp.menu_label(action)
/* returns a label for the menu for an action */
{
    local l = NULL;

	/* if action is '-', it's a menu separator */
    if (action ne '-') {
        l = L(mp.actdesc[action]) || action;

        local ks = [];

        /* look for this action in mp_doc keycodes */
        foreach (i, grep(keys(mp_doc.keycodes),
            sub (e) { mp_doc.keycodes[e] eq action; }))
            push(ks, i);

        /* look now in global keycodes */
        foreach (i, grep(keys(mp.keycodes),
            sub (e) { mp.keycodes[e] eq action; }))
            push(ks, i);

        if (size(ks))
            l = l ~ ' [' ~ join(ks, ', ') ~ ']';

    	mp.actions_by_menu_label[l] = action;
    }

	return l;
}


sub mp.trim_with_ellipsis(str, max)
/* trims the string to the last max characters, adding ellipsis if done */
{
	local v = regex(str, '/.{' ~ max ~ '}$/');
	return v && '...' ~ v || str;
}


sub mp.get_doc_names(max)
/* returns an array with the trimmed names of the documents */
{
    map(mp.docs, sub(e) {mp.trim_with_ellipsis(e->get_name(), (max || 24));});
}


sub mp.usage()
/* set mp.exit_message with an usage message (--help) */
{
	mp.exit_message = 
	sprintf(L(
		"Minimum Profit %s - Programmer Text Editor\n"\
		"Copyright (C) Angel Ortega <angel@triptico.com>\n"\
		"This software is covered by the GPL license. NO WARRANTY.\n"\
		"\n"\
		"Usage: mp-5 [options] [files...]\n"\
		"\n"\
		"Options:\n"\
		"\n"\
		" -t {tag}           Edits the file where tag is defined\n"\
		" -e {mpsl_code}     Executes MPSL code\n"\
		" -f {mpsl_script}   Executes MPSL script file\n"\
		" -d {directory}     Set current directory\n"\
		" -x {file}          Open file in the hexadecimal viewer\n"\
		" -txt               Use text mode instead of GUI\n"\
		" +NNN               Moves to line number NNN of last file\n"\
		"\n"\
		"Homepage: http://triptico.com/software/mp.html\n"\
		"Mailing list: mp-subscribe@lists.triptico.com\n"
	), mp.VERSION);
}


sub mp.process_cmdline()
/* process the command line arguments (ARGV) */
{
    local o;

    mp.load_tags();

    /* skip ARGV[0] */
    mp.binary_name = shift(ARGV);

    /* files requested to be opened */
    mp.active_pending = [];

    while (o = shift(ARGV)) {
        if (o eq '-h' || o eq '--help') {
            mp.usage();
            mp_c.exit();
            return;
        }
        else
        if (o eq '-e') {
            /* execute code */
            local c = shift(ARGV);

            if (! regex(c, '/;\s*$/'))
                c = c ~ ';';

            eval(c);
        }
        else
        if (o eq '-f') {
            /* execute script */
            local s = shift(ARGV);

            if (stat(s) == NULL)
                ERROR = sprintf(L("Cannot open '%s'"), s);
            else {
                mp.open(s);
                eval(join(mp.active.txt.lines, "\n"));
                mp.close();
            }
        }
        else
        if (o eq '-d')
            chdir(shift(ARGV));
        else
        if (o eq '-t')
            mp.open_tag(shift(ARGV));
        else
        if (o eq '-x') {
            local s = shift(ARGV);

            if (mp.hex_view(s) == NULL)
                ERROR = sprintf(L("Cannot open '%s'"), s);
        }
        else
        if (o eq '-txt')
            mp.config.text_mode = 1;
        else
        if (regex(o, '/^\+[0-9]+$/')) {
            if (size(mp.active_pending))
                mp.active_pending[-1] = mp.active_pending[-1] ~ ':' ~ (o + 0) ~ ':';
        }
        else
            push(mp.active_pending, o);
    }

    if (ERROR) {
        mp.exit_message = ERROR ~ "\n";
        ERROR = NULL;
        mp_c.exit();
        return;
    }

    /* if no files are to be loaded, try a session */
    if (size(mp.active_pending) == 0 && mp.config.auto_sessions) {
        mp.load_session();
    }
}


sub mp.load_profile()
/* loads ~/.mp.mpsl */
{
	/* if /etc/mp.mpsl exists, execute it */
	if (stat('/etc/mp.mpsl') != NULL) {
		eval( sub {
			local INC = [ '/etc' ];
			load('mp.mpsl');
		});
	}

	/* if ~/.mp.mpsl exists, execute it */
	if (ERROR == NULL && stat(HOMEDIR ~ '.mp.mpsl') != NULL) {
		eval( sub {
			local INC = [ HOMEDIR ];
			load(".mp.mpsl");
		});
	}

	/* errors? show in a message */
	if (ERROR != NULL) {
		mp.message = {
			'timeout'	=> time() + 20,
			'string'	=> ERROR
		};

		ERROR = NULL;
	}
}


sub mp.normalize_version(vs)
/* converts a version string to something usable with cmp() */
{
    vs->sregex('/-.+$/')->split('.')->map(sub(e) { sprintf("%03d", e); });
}


sub mp.assert_version(found, minimal, package)
/* asserts that 'found' version of 'package' is at least 'minimal',
   or generate a warning otherwise */
{
	if (cmp(mp.normalize_version(found),
		mp.normalize_version(minimal)) < 0) {
		mp.alert(sprintf(L("WARNING: %s version found is %s, but %s is needed"),
				package, found, minimal));
	}
}


sub mp.test_versions()
/* tests component versions */
{
    local mpdm = MPDM();

    mp.assert_version(mpdm.version, '2.0.2', 'MPDM');
    mp.assert_version(MPSL.VERSION, '2.2.0', 'MPSL');
}


/** modules **/

local mp_modules = [
    'drv',
    'move',
    'edit',
    'file',
    'clipboard',
    'search',
    'tags',
    'syntax',
    'macro',
    'templates',
    'spell',
    'misc',
    'crypt',
    'keyseq',
    'session',
    'build',
    'writing',
    'toys',
    'vcs'
];

foreach (m, mp_modules) {
    eval('load("mp_' ~ m ~ '.mpsl");');

    if (ERROR != NULL)
        mp.exit_message = mp.exit_message ~ ERROR ~ "\n";
}

ERROR = NULL;

/** main **/

mp.load_profile();
mp.drv.startup();
mp.process_cmdline();
mp.test_versions();
mp.drv.main_loop();
mp.drv.shutdown();
