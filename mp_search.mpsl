/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Search and replace.

    Copyright (C) 1991-2006 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://www.triptico.com

*/

/* successful searches will always be shown in this line */
mp.config.move_seek_to_line = 5;

/* editor actions */

mp.actions['seek'] 	= sub (d) {
	local t = mp.drv.form( [
		{ 'label'	=> L("Text to seek:"),
		  'type'	=> 'text',
		  'history'	=> 'search' },
		{ 'label'	=> L("Case sensitive") ~ ':',
		  'type'	=> 'checkbox',
		  'value'	=> mp.config.case_sensitive_search }
	] );

	if(t != NULL)
	{
		mp.config.case_sensitive_search = t[1];
		mp.search(d, t[0]) || mp.alert(L("Text not found."));
	}
};

mp.actions['seek_next']	= sub (d) { mp.search(d, NULL) ||
		mp.alert(L("Text not found."));
	};

mp.actions['replace']	= sub (d) {

	local r = mp.drv.form( [
		{ 'label'	=> L("Replace text:"),
		  'type'	=> 'text',
		  'history'	=> 'search'},
		{ 'label'	=> L("Replace with:"),
		  'type'	=> 'text',
		  'history'	=> 'replace'},
		{ 'label'	=> L("Case sensitive") ~ ':',
		  'type'	=> 'checkbox',
		  'value'	=> mp.config.case_sensitive_search },
		{ 'label'	=> L("Global replace:"),
		  'type'	=> 'checkbox',
		  'value'	=> mp.config.global_replace }
	] );

	if(r != NULL)
	{
		mp.config.case_sensitive_search = r[2];
		mp.config.global_replace = r[3];

		mp.replace(d, r[0], r[1]);
	}
};

/* default key bindings */

mp.keycodes['f3']	= "seek_next";
mp.keycodes['ctrl-f']	= "seek";
mp.keycodes['ctrl-r']	= "replace";

/* action descriptions */
mp.actdesc['seek']		= LL("Search text...");
mp.actdesc['seek_next'] 	= LL("Search next");
mp.actdesc['replace']		= LL("Replace...");

/* code */

sub mp.search(doc, str)
/* search str and put the current position there */
{
	local txt, x, y, r;

	if(str == NULL)
		str = mp.last_search;
	else
		mp.last_search = str;

	if(str == NULL)
		return(NULL);

	/* surround with / for the regex */
	str = '/' ~ str ~ '/';

	/* add optional case insensitivity flag */
	if(! mp.config.case_sensitive_search)
		str = str ~ 'i';

	txt = doc.txt;
	x = txt.x;
	y = txt.y;

	/* while not found, loop the lines */
	while(regex(str, txt.lines[y], x) == NULL && y < size(txt.lines))
	{
		x = 0; y++;
	}

	/* get last coords */
	r = regex();

	if(r)
	{
		mp.set_y(doc, y);
		mp.set_x(doc, r[0] + r[1]);

		/* set always to the same line */
		if((doc.txt.vy = doc.txt.y - mp.config.move_seek_to_line) < 0)
			doc.txt.vy = 0;
	}

	return(r);
}


sub mp.replace_1(doc, this, that)
/* searches 'this' and replaces it with 'that', once */
{
	local r;

	if((r = mp.search(doc, this)) != NULL)
	{
		local txt, l, c;

		/* get current line */
		txt = doc.txt;
		l = txt.lines[txt.y];

		/* get last match */
		c = regex();

		/* substitute */
		l = splice(l, NULL, c[0], c[1]);
		txt.lines[txt.y] = l[0];

		/* correct the x position */
		mp.set_x(doc, c[0] + size(to));

		/* now insert there */
		mp.insert(doc, that);

		txt.mod++;
	}

	return(r);
}


sub mp.replace(doc, this, that)
/* replaces 'this' with 'that', may be globally */
{
	while(mp.replace_1(doc, this, that))
	{
		if(!mp.config.global_replace) break;
	}
}
