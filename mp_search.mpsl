/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Search and replace.

    Copyright (C) 1991-2006 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://www.triptico.com

*/

/* editor actions */

mp.actions['seek'] 	= sub (d) { mp.search(d, mp.get_word(d)); };
mp.actions['seek-next']	= sub (d) { mp.search(d, NULL); };
mp.actions['replace']	= sub (d) { mp.replace(d, mp.get_word(d), 'TEST'); };
mp.actions['replace-all'] = sub (d) { mp.replace_all(d, mp.get_word(d), 'TESTALL'); };
mp.actions['replace-in-all'] = sub (d) { mp.replace_in_all(mp.get_word(d), 'TESTINALL'); };

/* default key bindings */

mp.keycodes['f3']	= "seek-next";
mp.keycodes['ctrl-f']	= "seek";
mp.keycodes['ctrl-r']	= "replace";

/* action descriptions */
mp.actdesc['seek']		= LL("Search text...");
mp.actdesc['seek-next'] 	= LL("Search next");
mp.actdesc['replace']		= LL("Replace...");
mp.actdesc['replace-all']	= LL("Replace all...");
mp.actdesc['replace-in-all']	= LL("Replace in all...");

/* code */

sub mp.search(doc, str)
/* search str and put the current position there */
{
	local txt, x, y, r;

	if(str == NULL)
		str = mp.last_search;

	if(str == NULL)
		return(NULL);

	txt = doc.txt;
	x = txt.x;
	y = txt.y;

	/* while not found, loop the lines */
	while(! regex("/" ~ str ~ "/", txt.lines[y], x) && y < size(txt.lines))
	{
		x = 0; y++;
	}

	/* get last coords */
	r = regex();

	if(r)
	{
		mp.set_y(doc, y);
		mp.set_x(doc, r[0] + r[1]);

		/* store last search */
		mp.last_search = str;
	}

	return(r);
}


sub mp.replace(doc, from, to)
/* searches 'from' and replaces it with 'to' */
{
	local r;

	if((r = mp.search(doc, from)) != NULL)
	{
		local txt, l, c;

		/* get current line */
		txt = doc.txt;
		l = txt.lines[txt.y];

		/* get last match */
		c = regex();

		/* substitute */
		l = splice(l, to, c[0], c[1]);
		txt.lines[txt.y] = l[0];

		/* correct the x position */
		mp.set_x(doc, c[0] + size(to));
	}

	return(r);
}


sub mp.replace_all(doc, from, to)
/* replaces all ocurrences of 'from' with 'to */
{
	while(mp.replace(doc, from, to));
}


sub mp.replace_in_all(from, to)
/* replaces in all open documents all ocurrences of 'from' with 'to' */
{
	local d;

	foreach(d, mp.docs)
		mp.replace_all(d, from, to);
}
