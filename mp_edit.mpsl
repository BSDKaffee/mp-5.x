/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Editing.

    Copyright (C) 1991-2006 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://www.triptico.com

*/

/*******************
	Data
********************/

/*******************
	Code
********************/

sub mp.break_line(doc, col)
/* breaks current line in two (inserts a newline) */
{
	local txt = doc.txt;
	local c, w;

	/* if col is NULL, set it to be the x cursor */
	if(col == NULL) col = txt.x;

	/* gets line where cursor is */
	c = txt.lines[txt.y];

	/* deletes from col to the end of line */
	w = splice(c, NULL, col, -1);

	/* set first part as current line */
	txt.lines[txt.y] = w[0];

	/* move to next line */
	txt.y++;

	/* insert a new line here */
	expand(txt.lines, txt.y, 1);

	/* fix the x cursor position */
	txt.x -= col;

	/* if autoindenting... */
	if(mp.config.auto_indent)
	{
		/* extract leading blanks in the original line
		   and prepend them to the line to be inserted */
		local i = regex("/^[ \t]*/", c, 0);

		w[1] = i ~ w[1];

		/* the x position is further the length of that */
		txt.x += size(i);
	}

	/* put second part there (or an empty string if NULL) */
	txt.lines[txt.y] = w[1] || '';
}


sub mp.join_line(doc)
/* joins the current line with the next one */
{
	local txt = doc.txt;

	if(txt.y < size(txt.lines))
	{
		/* concats current line with the next one */
		txt.lines[txt.y] = txt.lines[txt.y] ~ txt.lines[txt.y + 1];

		/* delete it */
		adel(txt.lines, txt.y + 1);
	}
}


sub mp.delete_line(doc)
/* deletes the current line */
{
	local txt = doc.txt;
	local vx;

	/* take current position */
	vx = mp.x2vx(txt.lines[txt.y], txt.x);

	/* if it's the only line, just replace it */
	if(size(txt.lines) == 1)
		txt.lines[0] = '';
	else
	{
		/* destroy the line */
		adel(txt.lines, txt.y);
	}

	/* fix if it was the last line */
	if(txt.y >= size(txt.lines))
		txt.y = size(txt.lines) - 1;

	/* move to previous x position */
	txt.x = mp.vx2x(txt.lines[txt.y], vx);
}


sub mp.delete_char(doc)
/* deletes the current char */
{
	local txt = doc.txt;

	/* is it over the end of line? */
	if(txt.x == size(txt.lines[txt.y]))
		mp.join_line(doc);
	else
	{
		local w;

		w = splice(txt.lines[txt.y], NULL, txt.x, 1);
		txt.lines[txt.y] = w[0];
	}
}


sub mp.insert(doc, str)
/* inserts a string into the cursor position */
{
	local txt = doc.txt;
	local w;

	/* splice and change */
	w = splice(txt.lines[txt.y], str, txt.x, 0);
	txt.lines[txt.y] = w[0];

	/* move right */
	txt.x += size(str);
}


sub mp.wrap_words(doc)
/* do the word wrapping */
{
	local txt = doc.txt;

	if(mp.config.wordwrap == 0) return;

	if(txt.x >= mp.config.wordwrap &&
		regex("/^.{1," ~ mp.config.wordwrap ~ "}\s/", txt.lines[txt.y]))
	{
		local w;

		/* take the coordinates */
		w = regex();

		/* break the line there */
		mp.break_line(doc, w[1]);

		/* delete the space at the end of the line */
		txt.lines[txt.y - 1] = sregex("/\s$/", txt.lines[txt.y - 1], NULL);
	}
}


sub mp.insert_space(doc)
/* inserts a space, taking wordwrapping into account */
{
	local txt = doc.txt;

	mp.wrap_words(doc);
	mp.insert(doc, ' ');
}
