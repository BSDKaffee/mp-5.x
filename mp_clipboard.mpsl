/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Clipboard routines.

    Copyright (C) 1991-2012 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://triptico.com

*/

/** editor actions **/

mp.actions['unmark']        = sub (d) { d->mp.unmark(); };
mp.actions['mark']          = sub (d) { d->mp.mark(); };
mp.actions['mark_vertical'] = sub (d) { d->mp.mark_vertical(); };

mp.actions['copy_mark']   = sub (d) { d->busy(1)->mp.copy()->mp.unmark()->busy(0); };
mp.actions['paste_mark']  = sub (d) { d->busy(1)->mp.store_undo()->mp.paste()->busy(0); };
mp.actions['cut_mark']    = sub (d) { d->busy(1)->mp.store_undo()->mp.cut()->busy(0); };
mp.actions['delete_mark'] = sub (d) { d->busy(1)->mp.store_undo()->mp.delete_mark()->busy(0); };

mp.actions['mouse_drag_mark'] = sub (d) {
    /* no selection yet? move to initial click and mark */
    if (d.txt.mark == NULL)
        d->mp.mark();

    /* move to drag position */
    d->move_to_coords_xy(mp.mouse_to_x, mp.mouse_to_y);

    /* and mark */
    d->mp.mark();

    return d;
};

mp.actions['mark_all'] = sub (d) { d->move_bof()->mp.mark()->move_eof()-> mp.mark(); };

mp.actions['cut_lines_with_string'] = sub (d, str) {
    if (str == NULL) {
        local r = mp.form(
            [
                {
                    'label'   => L("Cut lines containing:"),
                    'type'    => 'text',
                    'history' => 'cut_lines_with_string'
                }
            ]
        );

        if (r != NULL)
            str = r[0];
    }

    if (str != NULL) {
        d->busy(1)->mp.store_undo()->mp.cut_lines_with_string(str)->busy(0);
    }

    return d;
};


/** default key bindings **/

mp.keycodes['f8']           = "unmark";
mp.keycodes['f9']           = "mark";
mp.keycodes['ctrl-b']       = "mark_vertical";
mp.keycodes['ctrl-c']       = "copy_mark";
mp.keycodes['ctrl-v']       = "paste_mark";
mp.keycodes['ctrl-x']       = "cut_mark";
mp.keycodes['mouse-drag']   = "mouse_drag_mark";

/** action descriptions **/

mp.actdesc['unmark']                = LL("Unmark block");
mp.actdesc['mark']                  = LL("Mark beginning/end of block");
mp.actdesc['mark_vertical']         = LL("Mark vertical block");
mp.actdesc['copy_mark']             = LL("Copy block");
mp.actdesc['paste_mark']            = LL("Paste block");
mp.actdesc['cut_mark']              = LL("Cut block");
mp.actdesc['delete_mark']           = LL("Delete block");
mp.actdesc['mouse_drag_mark']       = LL("Mark using mouse dragging");
mp.actdesc['mark_all']              = LL("Mark all");
mp.actdesc['cut_lines_with_string'] = LL("Cut lines containing a string...");


/** code **/

sub mp.unmark(doc)
/* unmarks the block */
{
	/* just destroy the mark */
	doc.txt.mark = NULL;

	return doc;
}


sub mp.mark(doc)
/* marks the start or end of the block */
{
	local txt = doc.txt;

	if (txt.mark == NULL) {
		/* no mark; create one */
		txt.mark = {};
		txt.mark.ax = txt.mark.bx = txt.mark.ex = txt.x;
		txt.mark.ay = txt.mark.by = txt.mark.ey = txt.y;
		txt.mark.vertical = 0;
		txt.mark.incomplete = 1;
	}
	else {
		/* mark exists; extend current one */
		if (txt.mark.vertical == 0) {
			/* normal selection */
			if (txt.y < txt.mark.ay ||
				(txt.y == txt.mark.ay && txt.x < txt.mark.ax)) {
				/* move the beginning of the block */
				txt.mark.bx = txt.x;
				txt.mark.by = txt.y;
				txt.mark.ex = txt.mark.ax;
				txt.mark.ey = txt.mark.ay;
			}
			else {
				/* move the end of the block */
				txt.mark.ex = txt.x;
				txt.mark.ey = txt.y;
				txt.mark.bx = txt.mark.ax;
				txt.mark.by = txt.mark.ay;
			}
		}
		else {
			/* vertical selection */
			txt.mark.by = txt.mark.ay;
			txt.mark.ey = txt.y;
			if (txt.y < txt.mark.ay) {
				txt.mark.by = txt.y;
				txt.mark.ey = txt.mark.ay;
			}

			txt.mark.bx = txt.mark.ax;
			txt.mark.ex = txt.x;
			if (txt.x < txt.mark.ax) {
				txt.mark.bx = txt.x;
				txt.mark.ex = txt.mark.ax;
			}
		}

		txt.mark.incomplete = 0;
	}

	return doc;
}


sub mp.mark_vertical(doc)
/* start vertical block selection */
{
    doc->mp.mark();
    doc.txt.mark.vertical = 1;

    return doc;
}


sub mp.get_active_area(doc)
/* returns the active area: the selection or the full document */
{
    local m;

    if ((m = doc.txt.mark) == NULL)
        return doc.txt.lines;
    else
        return doc->mp.get_range(m.bx, m.by, m.ex, m.ey, m.vertical);
}


/**
 * mp.copy - Copies the selected block or a string to the clipboard
 * @doc: the source of the copy
 *
 * If @doc is a document, it copies to the clipboard the content of the
 * selected block, if one exists. If @doc is an array or scalar, it copies
 * that data directly into it.
 */
sub mp.copy(doc)
{
	if (is_hash(doc)) {
		if (doc.txt.mark) {
			mp.clipboard = doc->mp.get_active_area();
			mp.clipboard_vertical = doc.txt.mark.vertical;

			mp.drv.clip_to_sys();
		}
	}
	else {
		if (!is_array(doc))
			doc = split(doc, "\n");

		mp.clipboard = doc;
		mp.clipboard_vertical = 0;
		mp.drv.clip_to_sys();
	}

	return doc;
}


sub mp.delete_mark(doc)
/* deletes current selection */
{
    local txt = doc.txt;

    /* no mark? done */
    if (txt.mark != NULL) {
        /* deletes the range */
        if (txt.mark.bx != txt.mark.ex || txt.mark.by != txt.mark.ey)
            doc->delete_range(txt.mark.bx, txt.mark.by,
                txt.mark.ex, txt.mark.ey, txt.mark.vertical);

        doc->mp.unmark();
    }

    return doc;
}


sub mp.cut(doc)
/* cut (copy + delete) selected mark */
{
    doc->mp.copy()->mp.delete_mark();
    mp.drv.clip_to_sys();

    return doc;
}


/**
 * mp.paste - Pastes from the clipboard into a text or as a value
 * @doc: the destination of the copy
 *
 * If @doc is NULL, returns the content of the clipboard as a
 * scalar string; if it's not, is assumed to be a document and
 * pastes the content of the clipboard into the cursor position.
 */
sub mp.paste(doc)
{
    mp.drv.sys_to_clip();

    if (doc == NULL)
        return join(mp.clipboard, "\n");

    if (size(mp.clipboard) == 0)
        return doc;

    local t = mp.config.auto_indent;
    mp.config.auto_indent = 0;

	/* is there a block? replace it */
    if (doc.txt.mark != NULL) {
        /* move there */
        doc.txt.x = doc.txt.mark.bx;
        doc.txt.y = doc.txt.mark.by;

        /* and delete the block */
        doc->mp.delete_mark();
	}

    if (mp.clipboard_vertical == 0) {
        /* normal selection in clipboard */
        doc->insert(mp.clipboard);
    }
    else {
        /* vertical selection in clipboard */
        local txt = doc.txt;
        local s = size(mp.clipboard);
        local i = 0;
        local w;
        local e;

        while (i < s) {
            /* pad out to current x position */
            e = txt.x - size(txt.lines[txt.y]);

            while(e-- > 0)
                txt.lines[txt.y] = txt.lines[txt.y] ~ " ";
			
            /* insert this line of the clipboard */
            w = splice(txt.lines[txt.y], mp.clipboard[i++], txt.x, 0);
            txt.lines[txt.y++] = w[0];
        }
        txt.y--;
        txt.mod++;
    }

    mp.config.auto_indent = t;

    return doc;
}


/**
 * mp.cut_lines_with_string - Cuts all lines matching a string
 * @doc: the document
 * @str: the string to be matched
 *
 * Cuts all lines from the document that matches @str, that is
 * a regular expression. The deleted lines are left in the clipboard.
 * If a block is selected, only lines inside it are cut.
 */
sub mp.cut_lines_with_string(doc, str)
{
    local r = [];
    local p;

    if (str == NULL || str eq '')
        str = '^$';

    str = '/' ~ str ~ '/';

    if (doc.txt.mark) {
        doc->mp.cut();

        /* create a temporary work document */
        p = mp.create('<wrk>', mp.clipboard);
    }
    else
        p = doc;

    p->move_bof();

    while (p.txt.y < size(p.txt.lines) - 1) {
        local l = p.txt.lines[p.txt.y];

        if (regex(l, str) != NULL) {
            push(r, l);
            p->delete_line();
        }
        else
            p>move_down();
    }

    /* if p is the working document, move content back to doc */
    if (p.name eq '<wrk>')
        doc->insert(p.txt.lines);

    mp.clipboard = r;
    mp.drv.clip_to_sys();

    return doc;
}
