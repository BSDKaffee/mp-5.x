/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Clipboard routines.

    Copyright (C) 1991-2006 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://www.triptico.com

*/

/* editor actions */

mp.actions['unmark']	= sub (d) { mp.unmark(d); };
mp.actions['mark']	= sub (d) { mp.mark(d); };
mp.actions['copy-mark']	= sub (d) {
					mp.copy(d);
					mp.unmark(d);
					mp.drv.clip_to_sys();
				};

mp.actions['paste-mark'] = sub (d) {
					mp.store_undo(d);
					mp.drv.sys_to_clip();
					mp.paste(d);
				};

mp.actions['cut-mark']	= sub (d) {
					mp.store_undo(d);
					mp.cut(d);
					mp.drv.clip_to_sys();
				};

/* default key bindings */

mp.keycodes['f8']	= "unmark";
mp.keycodes['f9']	= "mark";
mp.keycodes['ctrl-c']	= "copy-mark";
mp.keycodes['ctrl-v']	= "paste-mark";
mp.keycodes['ctrl-x']	= "cut-mark";

/* action descriptions */
mp.actdesc['unmark']	= LL("Unmark block");
mp.actdesc['mark']	= LL("Mark begining/end of block");
mp.actdesc['copy-mark']	= LL("Copy block");
mp.actdesc['paste-mark']= LL("Paste block");
mp.actdesc['cut-mark']	= LL("Cut block");

/* code */

sub mp.unmark(doc)
/* unmarks the block */
{
	/* just destroy the mark */
	doc.txt.mark = NULL;
}


sub mp.mark(doc)
/* marks the start or end of the block */
{
	local txt = doc.txt;

	if(txt.mark == NULL)
	{
		/* no mark; create one */
		txt.mark = {};
		txt.mark.bx = txt.x;
		txt.mark.by = txt.y;
		txt.mark.ex = txt.x;
		txt.mark.ey = txt.y;
	}
	else
	{
		/* mark exists; extend current one */
		if(txt.y < txt.mark.by ||
			(txt.y == txt.mark.by && txt.x < txt.mark.bx))
		{
			/* move the beginning of the block */
			txt.mark.bx = txt.x;
			txt.mark.by = txt.y;
		}
		else
		{
			/* move the end of the block */
			txt.mark.ex = txt.x;
			txt.mark.ey = txt.y;
		}
	}
}


sub mp.get_range(doc, bx, by, ex, ey)
/* gets a range or characters from a document */
{
	local txt = doc.txt;

	local r = [];

	if(by == ey)
	{
		local w;

		/* block is just one line; take the inside
		   part and push it onto the clipboard */

		w = splice(txt.lines[by], NULL, bx, ex - bx);

		push(r, w[1]);
	}
	else
	{
		local w, n;

		/* block has more than one line */

		/* take from the beginning to the end of the first line */
		n = by;
		w = splice(txt.lines[n], NULL, bx, -1);

		push(r, w[1]);
		n++;

		/* take the central lines */
		while(n < ey)
			push(r, txt.lines[n++]);

		/* take the last line */
		w = splice(txt.lines[n], NULL, 0, ex);
		push(r, w[1]);
	}

	return(r);
}


sub mp.copy(doc)
/* copies the mark to the clipboard */
{
	local txt = doc.txt;

	/* no mark? done */
	if(txt.mark == NULL) return;

	mp.clipboard = mp.get_range(doc,
		txt.mark.bx, txt.mark.by, txt.mark.ex, txt.mark.ey);
}


sub mp.delete_range(doc, bx, by, ex, ey)
/* deletes a range of characters from a document */
{
	local txt = doc.txt;

	if(by == ey)
	{
		local w;

		/* block is just one line; delete the middle part */
		w = splice(txt.lines[by], NULL, bx, ex - bx);

		txt.lines[by] = w[0];
	}
	else
	{
		local w;

		/* block has more than one line */

		/* delete from the beginning to the end of the first line */
		w = splice(txt.lines[by], NULL, bx, -1);
		txt.lines[by] = w[0];

		/* delete from the beginning of the last line to
		   the end of the block */
		w = splice(txt.lines[ey], NULL, 0, ex);
		txt.lines[ey] = w[0];

		/* collapse the lines in between */
		collapse(txt.lines, by + 1, ey - by - 1);

		/* finally join both lines */
		mp.join_line(doc);
	}
}


sub mp.delete_mark(doc)
/* deletes current selection */
{
	local txt = doc.txt;

	/* no mark? done */
	if(txt.mark == NULL) return;

	/* move to the start of the block */
	txt.x = txt.mark.bx;
	txt.y = txt.mark.by;

	/* deletes the range */
	mp.delete_range(doc,
		txt.mark.bx, txt.mark.by, txt.mark.ex, txt.mark.ey);

	txt.mod++;

	mp.unmark(doc);
}


sub mp.cut(doc)
/* cut (copy + delete) selected mark */
{
	mp.copy(doc);
	mp.delete_mark(doc);
}


sub mp.insert_array(doc, a)
/* insert an array of text into a document */
{
	local txt = doc.txt;
	local s;

	/* empty array? return */
	if((s = size(a)) == 0) return;

	/* paste first line into current position */
	mp.insert_string(doc, a[0]);

	/* more than just one line? */
	if(s > 1)
	{
		/* break current line in two */
		mp.break_line(doc);

		/* insert last line */
		mp.insert_string(doc, a[s - 1]);
	}

	/* more than two lines? */
	if(s > 2)
	{
		local n = 1;

		/* open room */
		expand(txt.lines, txt.y, s - 2);

		/* transfer middle lines */
		while(n < s - 1)
			txt.lines[txt.y++] = a[n++];
	}
}


sub mp.paste(doc)
/* pastes from the clipboard into a text */
{
	mp.insert_array(doc, mp.clipboard);
}
