/*

    Minimum Profit 5.x
    A Programmer's Text Editor

    Clipboard routines.

    Copyright (C) 1991-2007 Angel Ortega <angel@triptico.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

    http://www.triptico.com

*/

/** editor actions **/


mp.actions['unmark']	= sub (d) { mp.unmark(d); };
mp.actions['mark']	= sub (d) { mp.mark(d); };
mp.actions['mark_vertical'] = sub (d) { mp.mark_vertical(d); };
mp.actions['copy_mark']	= sub (d) {
					mp.busy(1);
					mp.copy(d);
					mp.unmark(d);
					mp.busy(0);
				};

mp.actions['paste_mark'] = sub (d) {
					mp.busy(1);
					mp.store_undo(d);
					mp.paste(d);
					mp.busy(0);
				};

mp.actions['cut_mark']	= sub (d) {
					mp.busy(1);
					mp.store_undo(d);
					mp.cut(d);
					mp.busy(0);
				};

mp.actions['delete_mark'] = sub (d) {
					mp.busy(1);
					mp.store_undo(d);
					mp.delete_mark(d);
					mp.busy(0);
				};

mp.actions['mouse_drag_mark'] = sub (d) {

	/* no selection yet? move to initial click and mark */
	if (d.txt.mark == NULL)
		mp.mark(d);

	/* move to drag position */
	mp.move_to_coords_xy(d, mp.mouse_to_x, mp.mouse_to_y);

	/* and mark */
	mp.mark(d);
};

/** default key bindings **/

mp.keycodes['f8']		= "unmark";
mp.keycodes['f9']		= "mark";
mp.keycodes['ctrl-b']		= "mark_vertical";
mp.keycodes['ctrl-c']		= "copy_mark";
mp.keycodes['ctrl-v']		= "paste_mark";
mp.keycodes['ctrl-x']		= "cut_mark";
mp.keycodes['mouse-drag']	= "mouse_drag_mark";

/** action descriptions **/

mp.actdesc['unmark']		= LL("Unmark block");
mp.actdesc['mark']		= LL("Mark beginning/end of block");
mp.actdesc['mark_vertical']	= LL("Mark vertical block");
mp.actdesc['copy_mark']		= LL("Copy block");
mp.actdesc['paste_mark']	= LL("Paste block");
mp.actdesc['cut_mark']		= LL("Cut block");
mp.actdesc['delete_mark']	= LL("Delete block");
mp.actdesc['mouse_drag_mark']	= LL("Mark using mouse dragging");

/** code **/


sub mp.unmark(doc)
/* unmarks the block */
{
	/* just destroy the mark */
	doc.txt.mark = NULL;

	return doc;
}


sub mp.mark(doc)
/* marks the start or end of the block */
{
	local txt = doc.txt;

	if (txt.mark == NULL) {
		/* no mark; create one */
		txt.mark = {};
		txt.mark.ax = txt.mark.bx = txt.mark.ex = txt.x;
		txt.mark.ay = txt.mark.by = txt.mark.ey = txt.y;
		txt.mark.vertical = 0;
		txt.mark.incomplete = 1;
	}
	else {
		/* mark exists; extend current one */
		if (txt.mark.vertical == 0) {
			/* normal selection */
			if (txt.y < txt.mark.ay ||
				(txt.y == txt.mark.ay && txt.x < txt.mark.ax)) {
				/* move the beginning of the block */
				txt.mark.bx = txt.x;
				txt.mark.by = txt.y;
				txt.mark.ex = txt.mark.ax;
				txt.mark.ey = txt.mark.ay;
			}
			else {
				/* move the end of the block */
				txt.mark.ex = txt.x;
				txt.mark.ey = txt.y;
				txt.mark.bx = txt.mark.ax;
				txt.mark.by = txt.mark.ay;
			}
		}
		else {
			/* vertical selection */
			txt.mark.by = txt.mark.ay;
			txt.mark.ey = txt.y;
			if (txt.y < txt.mark.ay) {
				txt.mark.by = txt.y;
				txt.mark.ey = txt.mark.ay;
			}

			txt.mark.bx = txt.mark.ax;
			txt.mark.ex = txt.x;
			if (txt.x < txt.mark.ax) {
				txt.mark.bx = txt.x;
				txt.mark.ex = txt.mark.ax;
			}
		}

		txt.mark.incomplete = 0;
	}

	return doc;
}


sub mp.mark_vertical(doc)
/* start vertical block selection */
{
	mp.mark(doc);
	doc.txt.mark.vertical = 1;

	return doc;
}


sub mp.get_active_area(doc)
/* returns the active area: the selection or the full document */
{
	local m;

	if ((m = doc.txt.mark) == NULL)
		return doc.txt.lines;
	else
		return mp.get_range(doc, m.bx, m.by, m.ex, m.ey, m.vertical);
}


/**
 * mp.copy - Copies the selected block or a string to the clipboard
 * @doc: the source of the copy
 *
 * If @doc is a document, it copies to the clipboard the content of the
 * selected block, if one exists. If @doc is an array or scalar, it copies
 * that data directly into it.
 */
sub mp.copy(doc)
{
	if (is_hash(doc)) {
		if (doc.txt.mark) {
			mp.clipboard = mp.get_active_area(doc);
			mp.clipboard_vertical = doc.txt.mark.vertical;

			mp.drv.clip_to_sys();
		}
	}
	else {
		if (!is_array(doc))
			doc = split("\n", doc);

		mp.clipboard = doc;
		mp.clipboard_vertical = 0;
		mp.drv.clip_to_sys();
	}

	return doc;
}


sub mp.delete_mark(doc)
/* deletes current selection */
{
	local txt = doc.txt;

	/* no mark? done */
	if (txt.mark != NULL) {
		/* deletes the range */
        if (txt.mark.bx != txt.mark.ex || txt.mark.by != txt.mark.ey)
    		mp.delete_range(doc, txt.mark.bx, txt.mark.by,
					txt.mark.ex, txt.mark.ey, txt.mark.vertical);

		mp.unmark(doc);
	}

	return doc;
}


sub mp.cut(doc)
/* cut (copy + delete) selected mark */
{
	mp.copy(doc);
	mp.delete_mark(doc);
	mp.drv.clip_to_sys();

	return doc;
}


/**
 * mp.paste - Pastes from the clipboard into a text or as a value
 * @doc: the destination of the copy
 *
 * If @doc is NULL, returns the content of the clipboard as a
 * scalar string; if it's not, is assumed to be a document and
 * pastes the content of the clipboard into the cursor position.
 */
sub mp.paste(doc)
{
	mp.drv.sys_to_clip();

	if (doc == NULL)
		return join("\n", mp.clipboard);

	if (size(mp.clipboard) == 0)
		return doc;

	local t = mp.config.auto_indent;
	mp.config.auto_indent = 0;

	/* is there a block? replace it */
	if (doc.txt.mark != NULL) {
		/* move there */
		doc.txt.x = doc.txt.mark.bx;
		doc.txt.y = doc.txt.mark.by;

		/* and delete the block */
		mp.delete_mark(doc);
	}

	if (mp.clipboard_vertical == 0) {
		/* normal selection in clipboard */
		mp.insert(doc, mp.clipboard);
	}
	else {
		/* vertical selection in clipboard */
		local txt = doc.txt;
		local s = size(mp.clipboard);
		local i = 0;
		local w;
		local e;
		while (i < s) {
			/* pad out to current x position */
			e = txt.x - size(txt.lines[txt.y]);

			while(e-- > 0)
				txt.lines[txt.y] = txt.lines[txt.y] ~ " ";
			
			/* insert this line of the clipboard */
			w = splice(txt.lines[txt.y], mp.clipboard[i++], txt.x, 0);
			txt.lines[txt.y++] = w[0];
		}
		txt.y--;
		txt.mod++;
	}

	mp.config.auto_indent = t;

	return doc;
}
